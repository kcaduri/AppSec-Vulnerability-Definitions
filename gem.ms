namespace FidessaMEMOATSModel
{
    public class MEMOATSMngr
    {
        public Boolean GetFidessaMEMOATSFileCopyOnly()
        {

            string[] sFileName = null;
            string sFilePath = string.Empty;
            string ssFileName = string.Empty;
            string sFileNameLike = string.Empty;
            string sFileNameNew = string.Empty;
            string sOATSFileName = string.Empty;
            string sOATSFileExt = string.Empty;
            Boolean found = false;
            string sPath = string.Empty;
            int FileCount = 0;
            string sLine = string.Empty;

            try
            {
                CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(),string.Empty,
                MethodBase.GetCurrentMethod().Name.ToString().Trim(), CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " file FTP download (start)", string.Empty);

                sFilePath = CommonUtil.GETParamValue("FidessaMEMFilePath", CommonUtil.CONST_PROGRAM_NAME);
                sOATSFileName = CommonUtil.GETParamValue("OATSFileName", CommonUtil.CONST_PROGRAM_NAME).ToUpper();
                sOATSFileExt = CommonUtil.GETParamValue("OATSFileExt", CommonUtil.CONST_PROGRAM_NAME);
                sFileNameLike = Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("yyyyMMdd") + sOATSFileName;// "SANTNY";
                //sFileNameLike = Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("yyyyMMdd") + "SANT_NY_";

                if (Directory.Exists(sFilePath))
                {
                    sFileName = Directory.GetFiles(sFilePath, sFileNameLike + "*");

                    if (sFileName.Length > 0)
                    {
                        if (sFileName != null)
                        {
                            for (int i = sFileName.GetLowerBound(0); i <= sFileName.GetUpperBound(0); )
                            {
                                if (sFileName[i].ToString().Trim().Contains(sFileNameLike))
                                {
                                    CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(),string.Empty,
                                    MethodBase.GetCurrentMethod().Name.ToString().Trim(), "The following " + CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " file is downloaded from FIDESSA: " + sFileName[i].ToString().Trim(), string.Empty);

                                    //synergy to create a folder and then copy the file
                                    sPath = CommonUtil.GETParamValue("SynergyFilePath", CommonUtil.CONST_PROGRAM_NAME) + Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("MMddyy") + "\\";
                                    CommonUtil.CheckDir(sPath);
                                    ssFileName = sFileName[i].Replace(sFilePath, sPath);

                                    if (sFileName.Length <= 1)
                                    {
                                        //ssFileName = sFileName[i].Replace(sFilePath, CommonUtil.GETParamValue("SynergyFilePath", CommonUtil.CONST_PROGRAM_NAME));
                                        File.Copy(sFileName[i], ssFileName, true);
                                    }

                                    //Archives
                                    ssFileName = sFileName[i].Replace(sFilePath, CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME));
                                    File.Copy(sFileName[i], ssFileName, true);

                                    CommonUtil.ZipFiles(CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME), Path.GetFileName(ssFileName), "ARCHIVE");

                                    if (sFileName.Length <= 1)
                                    {
                                        CommonUtil.SendMail(ssFileName, Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))), CommonUtil.CONST_PROGRAM_NAME);
                                    }

                                    found = true;

                                    i = i + 1;

                                    FileCount = FileCount + 1;
                                }
                                else
                                { i = i + 1; }
                            }
                        }
                    }
                }
                else
                { return false; }

                if (FileCount > 1)// code to merge the files together into one
                {
                    sFileNameNew = Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("yyyyMMdd") + sOATSFileName + "_100";// + sOATSFileExt;
                    sPath = CommonUtil.GETParamValue("SynergyFilePath", CommonUtil.CONST_PROGRAM_NAME) + Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("MMddyy") + "\\";
                    CommonUtil.CheckDir(sPath);

                    File.Delete(sPath + sFileNameNew);

                    StreamWriter sw = new StreamWriter(sPath + sFileNameNew);

                    for (int i = sFileName.GetLowerBound(0); i <= sFileName.GetUpperBound(0); )
                    {
                        if (sFileName[i].ToString().Trim().Contains(sFileNameLike))
                        {
                            CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(),string.Empty,
                            MethodBase.GetCurrentMethod().Name.ToString().Trim(), "Multiple Files found for " + CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " ==> File Name: " + sFileName[i].ToString().Trim(), string.Empty);

                            ssFileName = sFileName[i].ToString().Trim();

                            StreamReader sr = new StreamReader(ssFileName);

                            if (sr != null)
                            {
                                sLine = sr.ReadLine();
                                while (sLine != null)
                                {
                                    sw.WriteLine(sLine);

                                    sLine = sr.ReadLine();
                                }

                                sw.WriteLine();
                                sw.WriteLine("***************************************************************************************************************************************************" +
                                             "***************************************************************************************************************************************************");
                                sw.WriteLine();
                            }

                            sr.Close();

                            sLine = string.Empty;

                            i = i + 1;

                            FileCount = FileCount + 1;
                        }
                        else
                        { i = i + 1; }
                    }

                    if (sw != null) sw.Close();

                    //Archives
                    ssFileName = (sPath + sFileNameNew).Replace(sPath, CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME));
                    File.Copy(sPath + sFileNameNew, ssFileName, true);

                    CommonUtil.ZipFiles(CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME), Path.GetFileName(ssFileName), "ARCHIVE");

                    CommonUtil.SendMail(ssFileName, Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))), CommonUtil.CONST_PROGRAM_NAME);

                    CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(), string.Empty,
                    MethodBase.GetCurrentMethod().Name.ToString().Trim(), "The following file was created to include all entries for " + CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " into a single OATS file for SYNERGY. ==> File Name: " + sFileNameNew.ToString().Trim(), string.Empty);

                    found = true;

                }

                // check the previous day file if Monday only - Check for Sunday
                if (!found)
                {
                    FileCount = 0;

                    if (Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).DayOfWeek == DayOfWeek.Monday)
                    {
                        sFileNameLike = System.DateTime.Now.AddDays(-1).ToString("yyyyMMdd") + sOATSFileName;

                        if (Directory.Exists(sFilePath))
                        {
                            sFileName = Directory.GetFiles(sFilePath, sFileNameLike + "*");

                            if (sFileName.Length != 0)
                            {
                                if (sFileName != null)
                                {
                                    for (int i = sFileName.GetLowerBound(0); i <= sFileName.GetUpperBound(0); )
                                    {
                                        if (sFileName[i].ToString().Trim().Contains(sFileNameLike))
                                        {
                                            CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(),string.Empty,
                                            MethodBase.GetCurrentMethod().Name.ToString().Trim(), "The following " + CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " file is downloaded from FIDESSA: " + sFileName[i].ToString().Trim(), string.Empty);

                                            //synergy to create a folder and then copy the file
                                            sPath = CommonUtil.GETParamValue("SynergyFilePath", CommonUtil.CONST_PROGRAM_NAME) + Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))).ToString("MMddyy") + "\\";
                                            CommonUtil.CheckDir(sPath);
                                            ssFileName = sFileName[i].Replace(sFilePath, sPath);

                                            //ssFileName = sFileName[i].Replace(sFilePath, CommonUtil.GETParamValue("SynergyFilePath", CommonUtil.CONST_PROGRAM_NAME));
                                            File.Copy(sFileName[i], ssFileName, true);

                                            //Archives
                                            ssFileName = sFileName[i].Replace(sFilePath, CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME));
                                            File.Copy(sFileName[i], ssFileName, true);

                                            CommonUtil.ZipFiles(CommonUtil.GETParamValue("ArchiveFile", CommonUtil.CONST_PROGRAM_NAME), Path.GetFileName(ssFileName), "ARCHIVE");

                                            CommonUtil.SendMail(ssFileName, Convert.ToDateTime(CommonUtil.CheckDate(CommonUtil.GETParamValue("AsOfDate", CommonUtil.CONST_PROGRAM_NAME))), CommonUtil.CONST_PROGRAM_NAME);

                                            found = true;

                                            i = i + 1;

                                            FileCount = FileCount + 1;
                                        }
                                        else
                                        { i = i + 1; }
                                    }
                                }
                            }
                        }
                        else
                        { return false; }
                    }
                }

                if (found)
                {
                    CommonUtil.AppLog(CommonUtil.CONST_SUCCESS, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(),string.Empty,
                    MethodBase.GetCurrentMethod().Name.ToString().Trim(), CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + "Fidessa MEM OATS file (finish)", string.Empty);
                }
                else
                {
                    CommonUtil.AppLog(CommonUtil.CONST_ERROR, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(), string.Empty,
                    MethodBase.GetCurrentMethod().Name.ToString().Trim(), CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " Error occured.", "The Fidessa MEM OATS file is not available yet. EXITING...");
                }

                return found;
            }

            catch (Exception ex)
            {
                CommonUtil.AppLog(CommonUtil.CONST_ERROR, MethodBase.GetCurrentMethod().DeclaringType.ToString().Trim(), ex.Source.ToString() + " ==> " + ex.TargetSite.ToString(),
                MethodBase.GetCurrentMethod().Name.ToString().Trim(), CommonUtil.CONST_PROGRAM_NAME.ToString().Trim() + " Error occured.", ex.Message.ToString().Trim());
                throw;
            }
        }
    }
}


To introduce a timeout mechanism that stops processing if a certain amount of time is exceeded, you can use a combination of `StreamReader`, `Stopwatch`, and a timeout threshold. Here's an example of how you can modify the code to achieve this:

```csharp
using System.Diagnostics;

// ...

if (sr != null)
{
    Stopwatch stopwatch = Stopwatch.StartNew();
    TimeSpan timeout = TimeSpan.FromSeconds(5); // Example timeout duration (5 seconds)

    sLine = sr.ReadLine();
    while (sLine != null)
    {
        // Check if the elapsed time exceeds the timeout threshold
        if (stopwatch.Elapsed > timeout)
        {
            // Timeout exceeded, stop processing
            break;
        }

        sw.WriteLine(sLine);
        sLine = sr.ReadLine();
    }

    // Stop the stopwatch after processing
    stopwatch.Stop();
}
```

In this example, I've added a `Stopwatch` instance to measure the elapsed time. The `timeout` variable represents the desired timeout duration (in this case, 5 seconds). Inside the loop, we check if the elapsed time exceeds the timeout threshold. If it does, we break out of the loop to stop processing. After processing, the stopwatch is stopped.

You can adjust the `timeout` value according to your specific requirements. Additionally, consider adding appropriate error handling and cleanup code as necessary for your use case.
